install.packages("ISLR")
library(MASS)
library(ISLR)
names(Boston)
?Boston
library(ggplot2)
ggplot(Boston,aes(medv,lstat)) + geom_point()
ggplot(Boston,aes(lstat,medv)) + geom_point()
fit1>-lm(medv~lstat,Boston)
fit1->lm(medv~lstat,Boston)
fit1<-lm(medv~lstat,Boston)
summary(fit1)
abline(fit1,col='red')
ggplot(Boston,aes(lstat,medv)) + geom_point() + geom_abline()
#Regress medv on lstat
?fit1
?lm
fit1<-lm(medv~lstat,Boston)
fit1[coefficients]
fit1$coefficients
fit1$coefficients[1]
fit1$coefficients[2]
fit1$coefficients[lstat]
fit1$coefficients$lstat
ggplot(Boston,aes(lstat,medv)) + geom_point() + geom_abline(intercept=fit$coef)
fit1$coef
ggplot(Boston,aes(lstat,medv)) + geom_point() + geom_abline(intercept=fit1$coef[1])
ggplot(Boston,aes(lstat,medv)) + geom_point() + geom_abline(intercept=fit1$coef[1],slope=fit1$coef[2])
ggplot(Boston,aes(lstat,medv)) + geom_point() + geom_abline(intercept=fit1$coef[1],slope=fit1$coef[2],colour="red")
ggplot(Boston,aes(lstat,medv)) + geom_point() + stat_smooth(method='lm')
predict(fit1,data.frame(lstat=c(5,10,15)),interval='confidence')
fit2<-lm(medv~lstat+age,Boston)
summary(fit2)
fit3<-lm(medv~.,Boston)
summary(fit3)
plot(fit3)
par(mfrow=c(2,2))
plot(fit3)
fit4<-update(fit3,~. -age -indus)
summary(fit4)
fit5<-lm(medv~lstat*age,Boston)
summary(fit5)
fit6<-lm(medv~lstat+I(lstat^2),Boston); summary(fit6)
?stat_smooth
par(mfrow=c(1,1))
plot(medv~lstat)
plot(Boston$medv~Boston$lstat)
points(Boston$lstat,fitted(fit6),col="red",pch=20)
ggplot(Boston,aes(lstat,medv)) + geom_point() + stat_smooth(method='lm',formula=medv~poly(lstat,3),color="red")
ggplot(Boston,aes(lstat,medv)) + geom_point() + stat_smooth(method='lm',formula=Boston$medv~poly(Boston$lstat,3),color="red")
ggplot(Boston,aes(lstat,medv)) + geom_point() + stat_smooth(method='lm',
formula=Boston$medv~poly(Boston$lstat,3,raw=TRUE),color="red")
formula=Boston$medv~poly(Boston$lstat,2,raw=TRUE),color="red")
ggplot(Boston,aes(lstat,medv)) + geom_point() + stat_smooth(method='lm',
formula=Boston$medv~poly(Boston$lstat,2,raw=TRUE),color="red")
ggplot(Boston,aes(lstat,medv)) + geom_point() + stat_smooth(method='lm',se=TRUE,fill=NA,
formula=Boston$medv~poly(Boston$lstat,2,raw=TRUE),color="red")
traceback()
ggplot(Boston,aes(lstat,medv)) + geom_point() + stat_smooth(method='lm',se=TRUE,fill=NA,
formula=Boston$medv~poly(Boston$lstat,2,raw=TRUE),color="red")
traceback()
ggplot(Boston,aes(lstat,medv)) + geom_point() + stat_smooth(method='lm',se=FALSE,fill=NA,
formula=Boston$medv~poly(Boston$lstat,2,raw=TRUE),color="red")
ggplot(Boston,aes(lstat,medv)) + geom_point() + stat_smooth(method='lm',se=FALSE,fill=NA,
formula=y~poly(x,2,raw=TRUE),color="red")
ggplot(Boston,aes(lstat,medv)) + geom_point() + stat_smooth(method='lm',se=TRUE,fill=NA,
formula=y~poly(x,2,raw=TRUE),color="red")
?stat_smooth
formula=y~poly(x,2))
ggplot(Boston,aes(lstat,medv)) + geom_point() + stat_smooth(method='lm',
formula=y~poly(x,2))
ggplot(Boston,aes(lstat,medv)) + geom_point() + stat_smooth(method='lm',formula=y~poly(x,2)) +
stat_smooth(method='lm',formula=y~poly(x,4))
ggplot(Boston,aes(lstat,medv)) + geom_point() + stat_smooth(method='lm',formula=y~poly(x,2)) +
stat_smooth(method='lm',formula=y~poly(x,4),color="red")
fix(Carseats)
cfit1<-lm(Sales~.+Income:Advertising+Age:Price,Carseats); summary(cfit1)
contrasts(Carseats$ShelveLoc)
?lm
?islr
?ISLR
library(ISLR)
names(Smarket)
summary(Smarket)
#View correlation matrix
pairs(Smarket,col=Smarket$Direction)
glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial)
#View model summary
summary(
summary(glm.fit)
sdf
summary(glm.fit)
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial)
summary(glm.fit)
glm.probs=predict(glm.fit,type='response')
glm.probs[1:5]
glm.pred=ifelse(glm.probs>.5,'Up','Down')
table(glm.pred,Smarket$Direction)
mean(glm.pred==Smarket$Direction)
#Set scope of training data
train=Year<2005
train=Smarket$Year<2005
#Fit training data
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial,subset=train)
#Evaluate performance on test data
glm.probs=predict(glm.fit,newdata=Smarket[!train],type='response')
glm.probs=predict(glm.fit,newdata=Smarket[!train,],type='response')
glm.pred=ifelse(glm.probs>.5,'Up','Down')
Direction.2005=Smarket$Direction[!train]
table(glm.pred,Direction.2005)
mean(glm.pred==Direction.2005)
#Create table of classifications and check mean performance
?mean
glm.fit=glm(Direction~Lag1+Lag2,
data=Smarket,family=binomial,subset=train)
#Evaluate performance on test data
glm.probs=predict(glm.fit,newdata=Smarket[!train,],type='response')
#Turn probabilities into classifications
glm.pred=ifelse(glm.probs>.5,'Up','Down')
#Explicitly define test data to test predictions
Direction.2005=Smarket$Direction[!train]
#Create table of classifications and check mean performance
table(glm.pred,Direction.2005)
mean(glm.pred==Direction.2005)
