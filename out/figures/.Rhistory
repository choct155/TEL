Model='Principal Components')
#Consolidate results into single frame
df<-data.frame(rbind(df1,df2,df3))
#Reintegrate year
df$Year<-yr
#Return output df
return(df)
}
slm(2000)
test<-slm(2000)
# Specify the width of your confidence intervals
interval1 <- -qnorm((1-0.9)/2)  # 90% multiplier
interval2 <- -qnorm((1-0.95)/2)  # 95% multiplier
test_plot<-ggplot(test,aes(colour=ModelName)) +
geom_hline(yintercept=0,colour = gray(1/2),lty = 2)
print(test_plot)
test_plot<-ggplot(test,aes(colour=ModelName)) +
geom_hline(yintercept=0,colour=gray(1/2),lty=2) +
geom_linerange(aes(x=Variable,
ymin = Coefficient - SE*interval1,
ymax=Coefficient + SE*interval1),
lwd=1,
position=position_dodge(width=1/2)) +
geom_pointrange(aes(x=Variable,y=Coefficient,
ymin=Coefficient - SE*interval2,
ymax=Coefficient + SE*interval2),
lwd=1/2,
position=position_dodge(width = 1/2),
shape=21,
fill="WHITE") +
coord_flip() + theme_bw()
print(test_plot)
test_plot<-ggplot(test,aes(colour=Model)) +
geom_hline(yintercept=0,colour=gray(1/2),lty=2) +
geom_linerange(aes(x=Variable,
ymin = Coefficient - SE*interval1,
ymax=Coefficient + SE*interval1),
lwd=1,
position=position_dodge(width=1/2)) +
geom_pointrange(aes(x=Variable,y=Coefficient,
ymin=Coefficient - SE*interval2,
ymax=Coefficient + SE*interval2),
lwd=1/2,
position=position_dodge(width = 1/2),
shape=21,
fill="WHITE") +
coord_flip() + theme_bw()
print(test_plot)
test
data[,c('dist_clust','dist_clust_bf','dist_clust_pca')]
slm<-function(yr){
#Fit and estimate models
fp<-lagsarlm(tot2,data=data[which(data$year==yr),],c_lw)
bf<-lagsarlm(bvf2,data=data[which(data$year==yr),],c_lw)
pca<-lagsarlm(pca2,data=data[which(data$year==yr),],c_lw)
#Capture model components
df1<-data.frame(Variable=attr(summary(fp)$coefficients,'names'),
Coefficient=fp$coefficients,
SE=fp$rest.se,
Model='Full Portfolio')
df2<-data.frame(Variable=attr(summary(bf)$coefficients,'names'),
Coefficient=bf$coefficients,
SE=bf$rest.se,
Model='Regression Filtered')
df3<-data.frame(Variable=attr(summary(pca)$coefficients,'names'),
Coefficient=pca$coefficients,
SE=pca$rest.se,
Model='Principal Components')
#Consolidate results into single frame
df<-data.frame(rbind(df1,df2,df3))
#Reintegrate year
df$Year<-yr
#Return output df
return(df)
}
test<-slm(2000)
# Specify the width of your confidence intervals
interval1 <- -qnorm((1-0.9)/2)  # 90% multiplier
interval2 <- -qnorm((1-0.95)/2)  # 95% multiplier
test_plot<-ggplot(test,aes(colour=Model)) +
geom_hline(yintercept=0,colour=gray(1/2),lty=2) +
geom_linerange(aes(x=Variable,
ymin = Coefficient - SE*interval1,
ymax=Coefficient + SE*interval1),
lwd=1,
position=position_dodge(width=1/2)) +
geom_pointrange(aes(x=Variable,y=Coefficient,
ymin=Coefficient - SE*interval2,
ymax=Coefficient + SE*interval2),
lwd=1/2,
position=position_dodge(width = 1/2),
shape=21,
fill="WHITE") +
coord_flip() + theme_bw()
print(test_plot)
test<-rbind(slm(2000),slm(2001))
test
# Specify the width of your confidence intervals
interval1 <- -qnorm((1-0.9)/2)  # 90% multiplier
interval2 <- -qnorm((1-0.95)/2)  # 95% multiplier
test_plot<-ggplot(test,aes(colour=Model)) +
geom_hline(yintercept=0,colour=gray(1/2),lty=2) +
geom_linerange(aes(x=Variable,
ymin = Coefficient - SE*interval1,
ymax=Coefficient + SE*interval1),
lwd=1,
position=position_dodge(width=1/2)) +
geom_pointrange(aes(x=Variable,y=Coefficient,
ymin=Coefficient - SE*interval2,
ymax=Coefficient + SE*interval2),
lwd=1/2,
position=position_dodge(width = 1/2),
shape=21,
fill="WHITE") +
coord_flip() + theme_bw() + facet_wrap(~ Year)
print(test_plot)
slm_dfs<-c()
for (yr in 1993:2009){
slm_tmp<-slm(yr)
slm_dfs<-c(slm_dfs,slm_tmp)
}
for (yr in 1993:2009){
print(yr)
slm_tmp<-slm(yr)
slm_dfs<-c(slm_dfs,slm_tmp)
}
for (yr in 2003:2009){
print(yr)
slm_tmp<-slm(yr)
slm_dfs<-c(slm_dfs,slm_tmp)
}
for (yr in 2004:2009){
print(yr)
slm_tmp<-slm(yr)
slm_dfs<-c(slm_dfs,slm_tmp)
}
for (yr in 1993:2002){
print(yr)
slm_tmp<-slm(yr)
slm_dfs<-c(slm_dfs,slm_tmp)
}
lagsarlm(tot2,data=data[which(data$year==2002),],c_lw)
tot3<-dist_clust ~ pop_growth + pcrev + pcap_q + prop_ratio + intensity_stock
lagsarlm(tot3,data=data[which(data$year==2002),],c_lw)
tot3<-dist_clust ~ pcrev + pcap_q + prop_ratio + intensity_stock
## Fit and Estimate SLM ##
lagsarlm(tot3,data=data[which(data$year==2002),],c_lw)
tot3<-dist_clust ~ pcintgov + pcrev + pcap_q + prop_ratio + intensity_stock
## Fit and Estimate SLM ##
lagsarlm(tot3,data=data[which(data$year==2002),],c_lw)
tot3<-dist_clust ~ pcintgov + pcrev + pcap_q + prop_ratio + intensity_stock
bvf3<-dist_clust_bf ~ pcintgov + pcrev + pcap_q + prop_ratio + intensity_stock
pca3<-dist_clust_pca ~ pcintgov + pcrev + pcap_q + prop_ratio + intensity_stock
mlist2<-list(tot2,bvf2,pca2)
mlist3<-list(tot3,bvf3,pca3)
mlist1
mlist2
mlist2[[1]]
#Define function to capture model coef and standard error by year and dependent
slm<-function(ml,yr){
#Fit and estimate models
fp<-lagsarlm(ml[[1]],data=data[which(data$year==yr),],c_lw)
bf<-lagsarlm(ml[[2]],data=data[which(data$year==yr),],c_lw)
pca<-lagsarlm(ml[[3]],data=data[which(data$year==yr),],c_lw)
#Capture model components
df1<-data.frame(Variable=attr(summary(fp)$coefficients,'names'),
Coefficient=fp$coefficients,
SE=fp$rest.se,
Model='Full Portfolio')
df2<-data.frame(Variable=attr(summary(bf)$coefficients,'names'),
Coefficient=bf$coefficients,
SE=bf$rest.se,
Model='Regression Filtered')
df3<-data.frame(Variable=attr(summary(pca)$coefficients,'names'),
Coefficient=pca$coefficients,
SE=pca$rest.se,
Model='Principal Components')
#Consolidate results into single frame
df<-data.frame(rbind(df1,df2,df3))
#Reintegrate year
df$Year<-yr
#Return output df
return(df)
}
slm_dfs<-c()
for (yr in 1993:2001){
print(yr)
slm_tmp<-slm(mlist2,yr)
slm_dfs<-c(slm_dfs,slm_tmp)
}
for (yr in 2002:2009){
print(yr)
slm_tmp<-slm(mlist3,yr)
slm_dfs<-c(slm_dfs,slm_tmp)
}
res_df<-rbind(slm_dfs)
res_df
slm_dfs
slm(mlist2,1993)
slm(mlist2,1994)
#Evaluate SLM for all three models over the 1993-2009 range
slm_dfs<-list()
for (yr in 1993:2001){
print(yr)
slm_tmp<-slm(mlist2,yr)
slm_dfs[[length(slm_dfs)+1]]<-slm_tmp
}
for (yr in 2002:2009){
print(yr)
slm_tmp<-slm(mlist3,yr)
slm_dfs[[length(slm_dfs)+1]]<-slm_tmp
}
#Row bind all results dfs
res_df<-do.call('rbind',slm_dfs)
res_df
#Row bind all results dfs
res_df<-do.call('rbind',slm_dfs)
# Specify the width of your confidence intervals
interval1 <- -qnorm((1-0.9)/2)  # 90% multiplier
interval2 <- -qnorm((1-0.95)/2)  # 95% multiplier
res_plot<-ggplot(res_df,aes(colour=Model)) +
geom_hline(yintercept=0,colour=gray(1/2),lty=2) +
geom_linerange(aes(x=Variable,
ymin = Coefficient - SE*interval1,
ymax=Coefficient + SE*interval1),
lwd=1,
position=position_dodge(width=1/2)) +
geom_pointrange(aes(x=Variable,y=Coefficient,
ymin=Coefficient - SE*interval2,
ymax=Coefficient + SE*interval2),
lwd=1/2,
position=position_dodge(width = 1/2),
shape=21,
fill="WHITE") +
coord_flip() + theme_bw() + facet_wrap(~ Year)
print(res_plot)
fp<-lagsarlm(tot2,data=data[which(data$year==1993),],c_lw)
res_plot<-ggplot(res_df,aes(colour=Model)) +
geom_hline(yintercept=0,colour=gray(1/2),lty=2) +
geom_linerange(aes(x=Variable,
ymin = Coefficient - SE*interval1,
ymax=Coefficient + SE*interval1),
lwd=1,
position=position_dodge(width=1/2)) +
geom_pointrange(aes(x=Variable,y=Coefficient,
ymin=Coefficient - SE*interval2,
ymax=Coefficient + SE*interval2),
lwd=1/2,
position=position_dodge(width = 1/2),
shape=21,
fill="WHITE") +
coord_flip() + theme_bw() + facet_wrap(~ Year,ncol=3)
print(res_plot)
res_plot<-ggplot(res_df,aes(colour=Model)) +
geom_hline(yintercept=0,colour=gray(1/2),lty=2) +
geom_linerange(aes(x=Variable,
ymin = Coefficient - SE*interval1,
ymax=Coefficient + SE*interval1),
lwd=1,
position=position_dodge(width=1/2)) +
geom_pointrange(aes(x=Variable,y=Coefficient,
ymin=Coefficient - SE*interval2,
ymax=Coefficient + SE*interval2),
lwd=1/2,
position=position_dodge(width = 1/2),
shape=21,
fill="WHITE") +
coord_flip() + theme_bw() + facet_wrap(~ Year)
print(res_plot)
### Expenditure Divergence - Panel Models
###
### CREATED: December 23, 2014
###
### LAST MODIFIED: December 23, 2014
###
### INPUT: Data prepared for modeling in the Expenditure Divergence analysis (Chapter 5).
### OUTPUT: Panels estimation results
##  Load applicable libraries ##
#Spatial econometrics
library(plm)
#Visualization
library(ggplot2)
##  Read in data ##
#Establish working directory
workdir<-'/home/choct155/dissertation/TEL/ipynb/'
#Read in data
data<-read.csv(paste(workdir,'h1_exp_model_in.csv',sep=''))
#Rename a few variables
names(data)[1]<-'cty'
names(data)[2]<-'year'
names(data)[12]<-'exp_total'
##  Convert to pdata.frame ##
pdata<-pdata.frame(data,index=c('cty','year'),drop.index=TRUE,row.names=TRUE)
pdata$ldist_clust<-lag(pdata$dist_clust)
##  Define Model Specifications ##
tot<-dist_clust ~ pop_growth + pcintgov + pcrev + pcap_q + prop_ratio + lag(intensity_stock)
tot<-dist_clust ~ exp_total + pop_growth + pcintgov + pcrev + pcap + prop_ratio + intensity_stock + exp_intensity
bvf<-dist_clust_bf ~ exp_total + pop_growth + pcintgov + pcrev + pcap + prop_ratio + intensity_stock + exp_intensity
pca<-dist_clust_pca ~ exp_total + pop_growth + pcintgov + pcrev + pcap + prop_ratio + intensity_stock + exp_intensity
totd<-dist_clust ~ pop_growth + pcintgov + pcrev + pcap_q + prop_ratio + lag(intensity_stock) + lag(dist_clust)
bvfd<-dist_clust_bf ~ exp_total + pop_growth + pcintgov + pcrev + pcap + prop_ratio + intensity_stock + exp_intensity
pcad<-dist_clust_pca ~ exp_total + pop_growth + pcintgov + pcrev + pcap + prop_ratio + intensity_stock + exp_intensity
##  Set up test models ##
test_fe<-plm(tot,data=pdata,model='within')
test_fe2<-plm(tot,data=pdata,model='within',effect='twoways')
test_pool<-plm(tot,data=pdata,model='pooling')
test_fd<-plm(tot,data=pdata,model='fd')
test_between<-plm(tot,data=pdata,model='between')
test_re<-plm(tot,data=pdata,model='random')
testd_fe<-plm(totd,data=pdata,model='within')
##  Capture residuals from test models  ##
res_fe<-data.frame(attr(test_fe$model,"index"),test_fe$resid)
res_pool<-data.frame(attr(test_pool$model,"index"),test_pool$resid)
##  Plot residuals  ##
res_fe_plot_yr<-ggplot(res_fe,aes(factor(year),test_fe.resid))+geom_boxplot(aes(fill=year)) +
theme(legend.position="none") +
theme(panel.background = element_rect(fill='white')) +
geom_hline(aes(yintercept=0),size=1) +
xlab('Year') + ylab('Residuals') + ggtitle('Fixed Effect Residuals by Year')
res_fe_plot_cty<-ggplot(res_fe,aes(factor(cty),test_fe.resid))+geom_boxplot(aes(fill=cty)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position="none") +
theme(panel.background = element_rect(fill='white')) +
geom_hline(aes(yintercept=0),size=1) +
xlab('County') + ylab('Residuals') + ggtitle('Fixed Effect Residuals by County')
res_fe_density<-ggplot(res_fe,aes(x=test_fe.resid))+geom_density(fill='red') +
theme(panel.background = element_rect(fill='white')) +
geom_vline(aes(xintercept=0),size=1) +
xlab('Residuals') + ylab('Density') + ggtitle('Distribution of Fixed Effect Residuals')
res_pool_plot_yr<-ggplot(res_pool,aes(factor(year),test_pool.resid))+geom_boxplot(aes(fill=year)) +
theme(legend.position="none") +
theme(panel.background = element_rect(fill='white')) +
geom_hline(aes(yintercept=0),size=1) +
xlab('Year') + ylab('Residuals') + ggtitle('Fixed Effect Residuals by Year')
res_pool_plot_cty<-ggplot(res_pool,aes(factor(cty),test_pool.resid))+geom_boxplot(aes(fill=cty)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position="none") +
theme(panel.background = element_rect(fill='white')) +
geom_hline(aes(yintercept=0),size=1) +
xlab('County') + ylab('Residuals') + ggtitle('Fixed Effect Residuals by County')
res_pool_density<-ggplot(res_pool,aes(x=test_pool.resid))+geom_density(fill='red') +
theme(panel.background = element_rect(fill='white')) +
geom_vline(aes(xintercept=0),size=1) +
xlab('Residuals') + ylab('Density') + ggtitle('Distribution of Fixed Effect Residuals')
print(res_pool_plot_cty)
attr(test_fe$model,"index")
##  Test poolability (h0: coefficients are the same for all entities)  ##
print('H0: Coefficients are identical across counties...')
print(pooltest(plm(tot,data=pdata),pvcm(tot,data=pdata,model='within')))
##  Test for the existence of county and year effects  ##
print(plmtest(tot,data=pdata,effect='twoways'))
##  Test for presence of fixed or random effects ##
#print(phtest(test_fe,test_re))
#Fails > computationally singular
##  Test for serial correlation ##
print(pbgtest(test_fe,order=10))
test_fe
summary(test_fe)
install.packages("stargazer")
library(stargazer)
stargazer(test_fe,test_fe2,test_pool,test_between)
stargazer(test_fe,test_fe2,test_pool,test_between,align=TRUE)
stargazer(test_fe,test_fe2,test_pool,test_between,align=TRUE,no.space=TRUE,column.sep.width="2pt")
stargazer(test_fe,test_fe2,test_pool,test_between,no.space=TRUE,column.sep.width="2pt")
bvf_fe<-plm(bvf,data=pdata,model='within')
bvf_fe2<-plm(bvf,data=pdata,model='within',effect='twoways')
bvf_pool<-plm(bvf,data=pdata,model='pooling')
bvf_fd<-plm(bvf,data=pdata,model='fd')
bvf_between<-bvf(tot,data=pdata,model='between')
bvf_re<-plm(bvf,data=pdata,model='random')
pca_fe<-plm(pca,data=pdata,model='within')
pca_fe2<-plm(pca,data=pdata,model='within',effect='twoways')
pca_pool<-plm(pca,data=pdata,model='pooling')
pca_fd<-plm(pca,data=pdata,model='fd')
pca_between<-pca(tot,data=pdata,model='between')
pca_re<-plm(pca,data=pdata,model='random')
bvf_fe<-plm(bvf,data=pdata,model='within')
bvf_fe2<-plm(bvf,data=pdata,model='within',effect='twoways')
bvf_pool<-plm(bvf,data=pdata,model='pooling')
bvf_fd<-plm(bvf,data=pdata,model='fd')
bvf_between<-plm(bvf,data=pdata,model='between')
bvf_re<-plm(bvf,data=pdata,model='random')
pca_fe<-plm(pca,data=pdata,model='within')
pca_fe2<-plm(pca,data=pdata,model='within',effect='twoways')
pca_pool<-plm(pca,data=pdata,model='pooling')
pca_fd<-plm(pca,data=pdata,model='fd')
pca_between<-plm(pca,data=pdata,model='between')
pca_re<-plm(pca,data=pdata,model='random')
stargazer(test_fe,bvf_fe,pca_fe,test_between,no.space=TRUE)
stargazer(test_fe,bvf_fe,pca_fe,no.space=TRUE)
data.frame(Measure=pdata$dist_clust,Space='Full')
dist_list<-list(data.frame(Measure=pdata$dist_clust,Space='Full'),
data.frame(Measure=pdata$dist_clust_bf,Space='RegFilt'),
data.frame(Measure=pdata$dist_clust_pca,Space='PCA'))
dist_stack<-do.call('rbind',dist_list)
dist_stack
print(dist)
dist_distr<-ggplot(dist_stack,aes(x=Measure)) +
geom_histogram(data=subset(dist_stack,Space=='Full'),fill='red',alpha=.5) +
geom_histogram(data=subset(dist_stack,Space=='RegFilt'),fill='blue',alpha=.5) +
geom_histogram(data=subset(dist_stack,Space=='PCA'),fill='green',alpha=.5) +
theme(panel.background = element_rect(fill='white'))
print(dist_distr)
dist_distr<-ggplot(dist_stack,aes(x=Measure)) +
geom_histogram(data=subset(dist_stack,Space=='Full'),fill='red',alpha=.5,binwidth=0.01) +
geom_histogram(data=subset(dist_stack,Space=='RegFilt'),fill='blue',alpha=.5) +
geom_histogram(data=subset(dist_stack,Space=='PCA'),fill='green',alpha=.5) +
theme(panel.background = element_rect(fill='white'))
print(dist_distr)
dist_distr<-ggplot(dist_stack,aes(x=Measure)) +
geom_histogram(data=subset(dist_stack,Space=='Full'),fill='red',alpha=.5,binwidth=0.01) +
geom_histogram(data=subset(dist_stack,Space=='RegFilt'),fill='blue',alpha=.5,binwidth=0.01) +
geom_histogram(data=subset(dist_stack,Space=='PCA'),fill='green',alpha=.5,binwidth=0.01) +
theme(panel.background = element_rect(fill='white'))
print(dist_distr)
dist_distr<-ggplot(dist_stack,aes(x=Measure)) +
geom_histogram(data=subset(dist_stack,Space=='Full'),fill='red',alpha=.5,binwidth=0.001) +
geom_histogram(data=subset(dist_stack,Space=='RegFilt'),fill='blue',alpha=.5,binwidth=0.001) +
geom_histogram(data=subset(dist_stack,Space=='PCA'),fill='green',alpha=.5,binwidth=0.001) +
theme(panel.background = element_rect(fill='white'))
print(dist_distr)
dist_distr<-ggplot(dist_stack,aes(x=Measure)) +
geom_histogram(data=subset(dist_stack,Space=='Full'),fill='red',alpha=.5,binwidth=0.007) +
geom_histogram(data=subset(dist_stack,Space=='RegFilt'),fill='blue',alpha=.5,binwidth=0.007) +
geom_histogram(data=subset(dist_stack,Space=='PCA'),fill='green',alpha=.5,binwidth=0.007) +
theme(panel.background = element_rect(fill='white'))
print(dist_distr)
dist_distr<-ggplot(dist_stack,aes(x=Measure)) +
geom_density(data=subset(dist_stack,Space=='Full'),fill='red',alpha=.5) +
geom_density(data=subset(dist_stack,Space=='RegFilt'),fill='blue',alpha=.5) +
geom_density(data=subset(dist_stack,Space=='PCA'),fill='green',alpha=.5) +
theme(panel.background = element_rect(fill='white'))
print(dist_distr)
dist_distr<-ggplot(dist_stack,aes(x=Measure)) +
geom_density(aes(fill='red'),alpha=.5)
print(dist_distr)
dist_distr<-ggplot(dist_stack,aes(x=Measure)) +
geom_density(aes(fill=Space),alpha=.5)
print(dist_distr)
dist_distr<-ggplot(dist_stack,aes(x=Measure)) +
geom_density(aes(fill=Space),alpha=.5) +
theme(panel.background = element_rect(fill='white'))
print(dist_distr)
ggsave('ExpDiv_Dist_Distributions.svg')
print(vs_plot)
ggsave('ExpDiv_Lasso_Scores_by_imp.svg')
res_pool_plot_yr<-ggplot(res_pool,aes(factor(year),test_pool.resid))+geom_boxplot(aes(fill=year)) +
theme(legend.position="none") +
theme(panel.background = element_rect(fill='white')) +
geom_hline(aes(yintercept=0),size=1) +
xlab('Year') + ylab('Residuals') + ggtitle('Fixed Effect Residuals by Year')
res_pool_plot_cty<-ggplot(res_pool,aes(factor(cty),test_pool.resid))+geom_boxplot(aes(fill=cty)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position="none") +
theme(panel.background = element_rect(fill='white')) +
geom_hline(aes(yintercept=0),size=1) +
xlab('County') + ylab('Residuals') + ggtitle('Fixed Effect Residuals by County')
res_pool_density<-ggplot(res_pool,aes(x=test_pool.resid))+geom_density(fill='red') +
theme(panel.background = element_rect(fill='white')) +
geom_vline(aes(xintercept=0),size=1) +
xlab('Residuals') + ylab('Density') + ggtitle('Distribution of Fixed Effect Residuals')
print(res_pool_density)
print(res_fe_density)
print(res_fe_density)
ggsave('ExpDiv_res_fe_density.svg')
print(res_pool_density)
ggsave('ExpDiv_res_pool_density.svg')
print(res_fe_density)
ggsave('ExpDiv_res_fe_density.svg')
print(res_pool_density)
res_pool_density<-ggplot(res_pool,aes(x=test_pool.resid))+geom_density(fill='red') +
theme(panel.background = element_rect(fill='white')) +
geom_vline(aes(xintercept=0),size=1) +
xlab('Residuals') + ylab('Density') + ggtitle('Distribution of Pooled Residuals')
print(res_pool_density)
ggsave('ExpDiv_res_pool_density.svg')
res_pool_plot_yr<-ggplot(res_pool,aes(factor(year),test_pool.resid))+geom_boxplot(aes(fill=year)) +
theme(legend.position="none") +
theme(panel.background = element_rect(fill='white')) +
geom_hline(aes(yintercept=0),size=1) +
xlab('Year') + ylab('Residuals') + ggtitle('Pooled Residuals by Year')
res_pool_plot_cty<-ggplot(res_pool,aes(factor(cty),test_pool.resid))+geom_boxplot(aes(fill=cty)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position="none") +
theme(panel.background = element_rect(fill='white')) +
geom_hline(aes(yintercept=0),size=1) +
xlab('County') + ylab('Residuals') + ggtitle('Pooled Residuals by County')
print(res_pool_plot_yr)
ggsave('ExpDiv_res_pool_plot_yr.svg')
print(res_pool_plot_cty)
ggsave('ExpDiv_res_pool_plot_cty.svg')
res_pool_plot_yr<-ggplot(res_pool,aes(factor(year),test_pool.resid))+geom_boxplot(aes(fill=year)) +
theme(legend.position="none") +
theme(panel.background = element_rect(fill='white')) +
geom_hline(aes(yintercept=0),size=1) +
xlab('Year') + ylab('Residuals')# + ggtitle('Pooled Residuals by Year')
res_pool_plot_cty<-ggplot(res_pool,aes(factor(cty),test_pool.resid))+geom_boxplot(aes(fill=cty)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position="none") +
theme(panel.background = element_rect(fill='white')) +
geom_hline(aes(yintercept=0),size=1) +
xlab('County') + ylab('Residuals') #+ ggtitle('Pooled Residuals by County')
print(res_pool_plot_yr)
ggsave('ExpDiv_res_pool_plot_yr.svg')
print(res_pool_plot_cty)
ggsave('ExpDiv_res_pool_plot_cty.svg')
stargazer(test_pool,bvf_pool,pca_pool,no.space=TRUE)
stargazer(test_fe,bvf_fe,pca_fe,no.space=TRUE)
stargazer(test_fe2,bvf_fe2,pca_fe2,no.space=TRUE)
stargazer(test_pool,bvf_pool,pca_pool,no.space=TRUE)
stargazer(test_fe,bvf_fe,pca_fe,no.space=TRUE)
stargazer(test_fe2,bvf_fe2,pca_fe2,no.space=TRUE)
